# Start with NVIDIA's official Ubuntu 22.04 image with CUDA support
FROM nvidia/cuda:12.0.0-devel-ubuntu22.04

ARG DEBIAN_FRONTEND=noninteractive

ENV OPENCV_VERSION="4.10.0"

# Install common dependencies and tools
RUN apt-get update && apt-get upgrade -y && apt install -y \
    curl \
    gnupg2 \
    lsb-release \
    vim \
    x11-apps \
    inetutils-ping \
    tmux \
    build-essential \
    cmake \
    git \
    wget \ 
    unzip \
    yasm \
    pkg-config \
    libswscale-dev \
    libtbb2 \
    libtbb-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libopenjp2-7-dev \
    libavformat-dev \
    libpq-dev \
    libopenblas-dev \
    libxine2-dev \
    libglew-dev \
    libtiff5-dev \
    zlib1g-dev \
    libavcodec-dev \
    libavutil-dev \
    libpostproc-dev \
    libeigen3-dev \
    libgtk2.0-dev \
    && rm -rf /var/lib/apt/lists/*

# Set up environment variables
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8
ENV ROS_DISTRO=humble
ENV ROS_VERSION=2
ENV ROS_PYTHON_VERSION=3

# Add the ROS 2 repository and keys
RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release && echo $UBUNTU_CODENAME) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null

# Install ROS 2 (replace 'humble' with your desired ROS 2 distro)
RUN apt-get update && apt-get install -y \
    ros-$ROS_DISTRO-desktop \
    python3-rosdep \
    ros-dev-tools \
    && rosdep init \
    && rosdep update \
    && rm -rf /var/lib/apt/lists/*

# OpenCV
RUN cd /opt/ &&\
    # Download and unzip OpenCV and opencv_contrib and delte zip files
    wget https://github.com/opencv/opencv/archive/$OPENCV_VERSION.zip &&\
    unzip $OPENCV_VERSION.zip &&\
    rm $OPENCV_VERSION.zip &&\
    wget https://github.com/opencv/opencv_contrib/archive/$OPENCV_VERSION.zip &&\
    unzip ${OPENCV_VERSION}.zip &&\
    rm ${OPENCV_VERSION}.zip &&\
    # Create build folder and switch to it
    mkdir /opt/opencv-${OPENCV_VERSION}/build && cd /opt/opencv-${OPENCV_VERSION}/build &&\
    # Cmake configure
    cmake \
        -DOPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib-${OPENCV_VERSION}/modules \
        -DWITH_CUDA=ON \
        -DCUDA_ARCH_BIN=5.3,6.2,7.2,8.7 \
        -DCMAKE_BUILD_TYPE=RELEASE \
        # Install path will be /usr/local/lib (lib is implicit)
        -DCMAKE_INSTALL_PREFIX=/usr/local \
        .. &&\
    # Make
    make -j"$(nproc)" && \
    # Install to /usr/local/lib
    make install && \
    ldconfig &&\
    # Remove OpenCV sources and build folder
    rm -rf /opt/opencv-${OPENCV_VERSION} && rm -rf /opt/opencv_contrib-${OPENCV_VERSION}

# Boost with Python 3
# RUN cd /tmp && wget -c 'https://sourceforge.net/projects/boost/files/boost/1.73.0/boost_1_73_0.tar.bz2'\
#     && tar -xvf boost_1_73_0.tar.bz2 \
#     && cd boost_1_73_0 \
#     && bash bootstrap.sh --with-python=python3 \
#     && ./b2 && ./b2 install \
#     && cd / && rm -rf /tmp/boost_1_73_0*
    
# Eigen3
# RUN cd /tmp && wget -c "https://gitlab.com/libeigen/eigen/-/archive/3.3.2/eigen-3.3.2.tar.bz2" \
#     && tar xvf eigen-3.3.2.tar.bz2 \
#     && cd eigen-3.3.2 && mkdir build && cd build && cmake .. \
#     && make -j$(nproc) && make install \
#     && cd / && rm -rf /tmp/eigen-3.3.2 && rm /tmp/eigen-3.3.2.tar.bz2   

RUN cd /tmp
RUN wget https://bootstrap.pypa.io/get-pip.py
RUN python3 get-pip.py
RUN rm get-pip.py
RUN pip install \
    lcm \
    pymap3d \
    skymarshal \
    scipy

RUN apt-get update && apt-get install -y \
    libepoxy-dev \
    && rm -rf /var/lib/apt/lists/*

# Pangolin
RUN apt-get update && apt-get install -y \
    libass9 libavc1394-0 libavdevice-dev libavdevice58 \
    libavfilter-dev libavfilter7 libbs2b0 libc++-14-dev libc++-dev libc++1-14 libc++abi1-14 \
    libcaca0 libcdio-cdda2 libcdio-paranoia2 libcdio19 libflite1 libiec61883-0 \
    libjack-jackd2-0 liblilv-0-0 libmysofa1 libopenal-data libopenal1 \
    libpocketsphinx3 librubberband2 libsamplerate0 libserd-0-0 libslang2 \
    libsord-0-0 libsphinxbase3 libsratom-0-0 libunwind-14 libunwind-14-dev \
    libvidstab1.1 libzimg2 ninja-build wayland-protocols \
    && rm -rf /var/lib/apt/lists/*
RUN cd /tmp && apt-get update && git clone --recursive https://github.com/stevenlovegrove/Pangolin.git \
    && cd Pangolin && git checkout v0.9.2 \
    && mkdir build && cd build && cmake .. \
    && make -j$(nproc) && make install \
    && cd / && rm -rf /tmp/Pangolin

RUN pip install --upgrade setuptools packaging

RUN apt-get update && apt-get install -y \
    ros-humble-robot-localization

# Note it is easier to just build and edit for errors locally
# and point to mounted python files in docker
# ACFR LCM Types Python Package
# ADD thirdparty/acfr-lcm-types /tmp/acfr-lcm-types
# WORKDIR /tmp/acfr-lcm-types
# RUN python3 setup.py build
# RUN pip install .

# COPY entrypoints/ros_humble_entrypoint.sh /ros_entrypoint.sh

# Source ROS 2 setup in the bashrc file
RUN echo "source /opt/ros/humble/setup.bash" >> ~/.bashrc

# Arguments for user creation (can be passed at build time)
ARG USERNAME=admin
ARG USER_ID=1000
ARG GROUP_ID=1000

# Install sudo and other necessary packages
RUN apt-get update && apt-get install -y sudo

# Create a user with the specified UID and GID
RUN groupadd -g $GROUP_ID $USERNAME && \
    useradd -m -u $USER_ID -g $GROUP_ID -s /bin/bash $USERNAME

# Add the user to the sudoers file with full root access without a password
RUN echo "$USERNAME ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# RUN usermod -aG sudo,video,i2c "$USERNAME"
RUN usermod -aG sudo,video "$USERNAME"

# Set the default user to the new user
USER $USERNAME

# Set default shell to bash
CMD ["/bin/bash"]